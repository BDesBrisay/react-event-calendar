{"ast":null,"code":"import _classCallCheck from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bryced/repos/react-event-calendar/src/lib/components/Calendar.js\";\nimport React from 'react';\nimport dateFns from 'date-fns';\nimport './Calendar.css';\n\nvar isInArray = function isInArray(array, date) {\n  return !!array.find(function (item) {\n    return item.getTime() === date.getTime();\n  });\n};\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  function Calendar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Calendar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      selectedMonth: _this.props.selectedMonth ? _this.props.selectedMonth : new Date(),\n      selectedDate: _this.props.selectedDate ? _this.props.selectedDate : new Date(),\n      eventDates: _this.props.eventDates ? _this.props.eventDates : []\n    };\n\n    _this.onDateClick = function (day) {\n      _this.setState({\n        selectedDate: day\n      });\n\n      if (_this.props.onChange) _this.props.onChange(day);\n    };\n\n    _this.nextMonth = function () {\n      _this.setState({\n        selectedMonth: dateFns.addMonths(_this.state.selectedMonth, 1)\n      });\n    };\n\n    _this.prevMonth = function () {\n      _this.setState({\n        selectedMonth: dateFns.subMonths(_this.state.selectedMonth, 1)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var label = dateFns.format(this.state.selectedMonth, 'MMMM YYYY');\n      var _this$props$customSty = this.props.customStyles,\n          _this$props$customSty2 = _this$props$customSty.headerStyles,\n          headerStyles = _this$props$customSty2 === void 0 ? {} : _this$props$customSty2,\n          _this$props$customSty3 = _this$props$customSty.titleStyles,\n          titleStyles = _this$props$customSty3 === void 0 ? {} : _this$props$customSty3,\n          _this$props$customSty4 = _this$props$customSty.nextStyles,\n          nextStyles = _this$props$customSty4 === void 0 ? {} : _this$props$customSty4,\n          _this$props$customSty5 = _this$props$customSty.prevStyles,\n          prevStyles = _this$props$customSty5 === void 0 ? {} : _this$props$customSty5;\n      return React.createElement(\"div\", {\n        className: \"header row\",\n        style: headerStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col col-start\",\n        style: prevStyles,\n        onClick: this.prevMonth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"chevron_left\")), React.createElement(\"div\", {\n        className: \"col col-center\",\n        style: titleStyles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, label)), React.createElement(\"div\", {\n        className: \"col col-end\",\n        style: nextStyles,\n        onClick: this.nextMonth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"chevron_right\")));\n    }\n  }, {\n    key: \"renderDays\",\n    value: function renderDays() {\n      var startDate = dateFns.startOfWeek(this.state.selectedMonth);\n      var days = [];\n\n      for (var i = 0; i < 7; i++) {\n        var label = dateFns.format(dateFns.addDays(startDate, i), 'ddd');\n        days.push(React.createElement(\"div\", {\n          className: \"col col-center\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        }, label));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"days row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, days);\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          selectedMonth = _this$state.selectedMonth,\n          selectedDate = _this$state.selectedDate,\n          eventDates = _this$state.eventDates;\n      var _this$props = this.props,\n          minDate = _this$props.minDate,\n          maxDate = _this$props.maxDate;\n      var monthStart = dateFns.startOfMonth(selectedMonth);\n      var monthEnd = dateFns.endOfMonth(monthStart);\n      var startDate = dateFns.startOfWeek(monthStart);\n      var endDate = dateFns.endOfWeek(monthEnd);\n      var rows = [];\n      var days = [];\n      var day = startDate;\n\n      while (day <= endDate) {\n        var _loop = function _loop(i) {\n          var formattedDate = dateFns.format(day, 'D');\n          var cloneDay = day;\n          var outerClass = 'col cell';\n          if (!dateFns.isSameMonth(day, monthStart)) outerClass += ' disabled';\n          if (dateFns.isBefore(day, minDate) || dateFns.isAfter(day, maxDate)) outerClass += ' disabled outside';\n          var innerClass = 'innerCell';\n          if (isInArray(eventDates, day)) innerClass += ' event';\n          if (dateFns.isSameDay(day, selectedDate)) innerClass += ' selected';\n          days.push(React.createElement(\"div\", {\n            key: day,\n            className: outerClass,\n            onClick: function onClick() {\n              return _this2.onDateClick(dateFns.parse(cloneDay));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 90\n            },\n            __self: this\n          }, React.createElement(\"div\", {\n            className: innerClass,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 95\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"number\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96\n            },\n            __self: this\n          }, formattedDate))));\n          day = dateFns.addDays(day, 1);\n        };\n\n        for (var i = 0; i < 7; i++) {\n          _loop(i);\n        }\n\n        rows.push(React.createElement(\"div\", {\n          className: \"row\",\n          key: day,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, days));\n        days = [];\n      }\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, rows);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"calendar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.renderHeader(), this.renderDays(), this.renderCells());\n    }\n  }]);\n\n  return Calendar;\n}(React.Component);\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/bryced/repos/react-event-calendar/src/lib/components/Calendar.js"],"names":["React","dateFns","isInArray","array","date","find","item","getTime","Calendar","state","selectedMonth","props","Date","selectedDate","eventDates","onDateClick","day","setState","onChange","nextMonth","addMonths","prevMonth","subMonths","label","format","customStyles","headerStyles","titleStyles","nextStyles","prevStyles","startDate","startOfWeek","days","i","addDays","push","minDate","maxDate","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","outerClass","isSameMonth","isBefore","isAfter","innerClass","isSameDay","parse","renderHeader","renderDays","renderCells","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dateFns from 'date-fns';\n\nimport './Calendar.css';\n\nconst isInArray = (array, date) => (\n  !!array.find((item) => item.getTime() === date.getTime())\n);\n\nclass Calendar extends React.Component {\n  state = {\n    selectedMonth: this.props.selectedMonth ? this.props.selectedMonth : new Date(),\n    selectedDate: this.props.selectedDate ? this.props.selectedDate : new Date(),\n    eventDates: this.props.eventDates ? this.props.eventDates : []\n  };\n\n  renderHeader() {\n    const label = dateFns.format(this.state.selectedMonth, 'MMMM YYYY')\n    const { customStyles: { headerStyles = {}, titleStyles = {}, nextStyles = {}, prevStyles = {} } } = this.props;\n\n    return (\n      <div \n        className=\"header row\" \n        style={headerStyles}\n      >\n        <div \n          className=\"col col-start\"\n          style={prevStyles} \n          onClick={this.prevMonth}\n        >\n          <div className=\"icon\">chevron_left</div>\n        </div>\n        <div \n          className=\"col col-center\"\n          style={titleStyles}\n        >\n          <span>{label}</span>\n        </div>\n        <div \n          className=\"col col-end\"\n          style={nextStyles}\n          onClick={this.nextMonth}\n        >\n          <div className=\"icon\">chevron_right</div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const startDate = dateFns.startOfWeek(this.state.selectedMonth);\n    const days = [];\n\n    for (let i = 0; i < 7; i++) {\n      const label = dateFns.format(dateFns.addDays(startDate, i), 'ddd');\n\n      days.push(\n        <div className=\"col col-center\" key={i}>{label}</div>\n      );\n    }\n\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  renderCells() {\n    const { selectedMonth, selectedDate, eventDates } = this.state;\n    const { minDate, maxDate } = this.props;\n    const monthStart = dateFns.startOfMonth(selectedMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n    const rows = [];\n    let days = [];\n    let day = startDate;\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        const formattedDate = dateFns.format(day, 'D');\n        const cloneDay = day;\n\n        let outerClass = 'col cell';\n        if (!dateFns.isSameMonth(day, monthStart)) outerClass += ' disabled';\n        if (dateFns.isBefore(day, minDate) || dateFns.isAfter(day, maxDate)) outerClass += ' disabled outside';\n\n        let innerClass = 'innerCell';\n        if (isInArray(eventDates, day)) innerClass += ' event';\n        if (dateFns.isSameDay(day, selectedDate)) innerClass += ' selected';\n\n        days.push(\n          <div\n            key={day}\n            className={outerClass}\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\n          >\n            <div className={innerClass}>\n              <span className=\"number\">{formattedDate}</span>\n            </div>\n          </div>\n        );\n\n        day = dateFns.addDays(day, 1);\n      }\n\n      rows.push(\n        <div className=\"row\" key={day}>{days}</div>\n      );\n\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n\n  onDateClick = day => {\n    this.setState({ selectedDate: day });\n    if (this.props.onChange) this.props.onChange(day);\n  };\n\n  nextMonth = () => {\n    this.setState({ selectedMonth: dateFns.addMonths(this.state.selectedMonth, 1) });\n  };\n\n  prevMonth = () => {\n    this.setState({ selectedMonth: dateFns.subMonths(this.state.selectedMonth, 1) });\n  };\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}