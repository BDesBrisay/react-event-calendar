{"ast":null,"code":"import _classCallCheck from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/bryced/repos/react-event-calendar/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/bryced/repos/react-event-calendar/src/lib/components/Calendar.js\";\nimport React from 'react';\nimport dateFns from 'date-fns';\nimport './Calendar.css';\n\nvar isInArray = function isInArray(array, date) {\n  return !!array.find(function (item) {\n    return item.getTime() === date.getTime();\n  });\n};\n\nvar Calendar =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Calendar, _React$Component);\n\n  function Calendar() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Calendar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Calendar)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      currentMonth: new Date(),\n      selectedDate: new Date(),\n      eventDates: [new Date('Sun Dec 23 2018 00:00:00'), new Date('Sun Dec 27 2018 00:00:00'), new Date('Sun Dec 14 2018 00:00:00'), new Date('Sun Dec 2 2018 00:00:00')]\n    };\n\n    _this.onDateClick = function (day) {\n      _this.setState({\n        selectedDate: day\n      });\n    };\n\n    _this.nextMonth = function () {\n      _this.setState({\n        currentMonth: dateFns.addMonths(_this.state.currentMonth, 1)\n      });\n    };\n\n    _this.prevMonth = function () {\n      _this.setState({\n        currentMonth: dateFns.subMonths(_this.state.currentMonth, 1)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Calendar, [{\n    key: \"renderHeader\",\n    value: function renderHeader() {\n      var dateFormat = \"MMMM YYYY\";\n      return React.createElement(\"div\", {\n        className: \"header row flex-middle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col col-start\",\n        onClick: this.prevMonth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \"chevron_left\")), React.createElement(\"div\", {\n        className: \"col col-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, dateFns.format(this.state.currentMonth, dateFormat))), React.createElement(\"div\", {\n        className: \"col col-end\",\n        onClick: this.nextMonth,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, \"chevron_right\")));\n    }\n  }, {\n    key: \"renderDays\",\n    value: function renderDays() {\n      var dateFormat = \"ddd\";\n      var days = [];\n      var startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n      for (var i = 0; i < 7; i++) {\n        days.push(React.createElement(\"div\", {\n          className: \"col col-center\",\n          key: i,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, dateFns.format(dateFns.addDays(startDate, i), dateFormat)));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"days row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, days);\n    }\n  }, {\n    key: \"renderCells\",\n    value: function renderCells() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          currentMonth = _this$state.currentMonth,\n          selectedDate = _this$state.selectedDate;\n      var monthStart = dateFns.startOfMonth(currentMonth);\n      var monthEnd = dateFns.endOfMonth(monthStart);\n      var startDate = dateFns.startOfWeek(monthStart);\n      var endDate = dateFns.endOfWeek(monthEnd);\n      var dateFormat = \"D\";\n      var rows = [];\n      var days = [];\n      var day = startDate;\n      var formattedDate = \"\";\n\n      while (day <= endDate) {\n        var _loop = function _loop(i) {\n          formattedDate = dateFns.format(day, dateFormat);\n          var cloneDay = day;\n          console.log(day);\n          days.push(React.createElement(\"div\", {\n            className: \"col cell \".concat(!dateFns.isSameMonth(day, monthStart) ? 'disabled' : dateFns.isSameDay(day, selectedDate) ? 'selected' : '', \" \").concat(isInArray(_this2.state.eventDates, day) ? 'event' : ''),\n            key: day,\n            onClick: function onClick() {\n              return _this2.onDateClick(dateFns.parse(cloneDay));\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }, React.createElement(\"span\", {\n            className: \"number\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 87\n            },\n            __self: this\n          }, formattedDate)));\n          day = dateFns.addDays(day, 1);\n        };\n\n        for (var i = 0; i < 7; i++) {\n          _loop(i);\n        }\n\n        rows.push(React.createElement(\"div\", {\n          className: \"row\",\n          key: day,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, days));\n        days = [];\n      }\n\n      return React.createElement(\"div\", {\n        className: \"body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, rows);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"calendar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, this.renderHeader(), this.renderDays(), this.renderCells());\n    }\n  }]);\n\n  return Calendar;\n}(React.Component);\n\nexport default Calendar;","map":{"version":3,"sources":["/Users/bryced/repos/react-event-calendar/src/lib/components/Calendar.js"],"names":["React","dateFns","isInArray","array","date","find","item","getTime","Calendar","state","currentMonth","Date","selectedDate","eventDates","onDateClick","day","setState","nextMonth","addMonths","prevMonth","subMonths","dateFormat","format","days","startDate","startOfWeek","i","push","addDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","console","log","isSameMonth","isSameDay","parse","renderHeader","renderDays","renderCells","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport dateFns from 'date-fns';\n\nimport './Calendar.css';\n\nconst isInArray = (array, date) => (\n  !!array.find((item) => item.getTime() === date.getTime())\n);\n\nclass Calendar extends React.Component {\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date(),\n    eventDates: [\n      new Date('Sun Dec 23 2018 00:00:00'),\n      new Date('Sun Dec 27 2018 00:00:00'),\n      new Date('Sun Dec 14 2018 00:00:00'),\n      new Date('Sun Dec 2 2018 00:00:00')\n    ]\n  };\n\n  renderHeader() {\n    const dateFormat = \"MMMM YYYY\";\n\n    return (\n      <div className=\"header row flex-middle\">\n        <div className=\"col col-start\" onClick={this.prevMonth}>\n          <div className=\"icon\">chevron_left</div>\n        </div>\n        <div className=\"col col-center\">\n          <span>{dateFns.format(this.state.currentMonth, dateFormat)}</span>\n        </div>\n        <div className=\"col col-end\" onClick={this.nextMonth}>\n          <div className=\"icon\">chevron_right</div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n    const dateFormat = \"ddd\";\n    const days = [];\n\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {dateFns.format(dateFns.addDays(startDate, i), dateFormat)}\n        </div>\n      );\n    }\n\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  renderCells() {\n    const { currentMonth, selectedDate } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n\n    const dateFormat = \"D\";\n    const rows = [];\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, dateFormat);\n        const cloneDay = day;\n        console.log(day)\n        days.push(\n          <div\n            className={`col cell ${\n              !dateFns.isSameMonth(day, monthStart)\n                ? 'disabled'\n                : dateFns.isSameDay(day, selectedDate) ? 'selected' : ''\n              } ${isInArray(this.state.eventDates, day) ? 'event' : ''\n            }`}\n            key={day}\n            onClick={() => this.onDateClick(dateFns.parse(cloneDay))}\n          >\n            <span className=\"number\">{formattedDate}</span>\n          </div>\n        );\n        day = dateFns.addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n\n  onDateClick = day => {\n    this.setState({\n      selectedDate: day\n    });\n  };\n\n  nextMonth = () => {\n    this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  prevMonth = () => {\n    this.setState({\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    );\n  }\n}\n\nexport default Calendar;"]},"metadata":{},"sourceType":"module"}